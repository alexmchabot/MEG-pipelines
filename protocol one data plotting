averaging_pipeline = 'across_participant'  #two methods to get averages 1) 'per_participant' extract epochs -> average epochs per participant and produce evoked -> grand average all evoked 2) = 'across_participant': extract epochs -> average all epochs across participants
plot_directory = pathlib.Path(f'../../out_data/{protocol}/plots/{date}/{averaging_pipeline}')
if not plot_directory.exists():
    plot_directory.mkdir(parents=True)

# define file names for saving based on ICA variable
ICA_suffix = "ICA" if ICA else ""
reject_suffix = "bad_epochs_rejected" if reject_bad_epochs else ""
evoked_method = "across_participant" if averaging_pipeline == 'across_participant' else "per_participant"

if averaging_pipeline == 'across_participant':
    
    # Initialize a dictionary to store ERPs 
    evks = {}
    # Iterate through each condition in all_pa_epochs
    for condition, epochs_list in all_pa_epochs.items():
        # Combine all epochs across participants for the current condition
        combined_epochs = mne.concatenate_epochs(epochs_list)
        # Calculate the ERP (average across epochs)
        evk = combined_epochs.average()
        # Store the ERP in the dictionary
        evks[condition] = evk

    # Calculate the number of participants based on the evoked objects
    num_participants_used = len(epochs_list)
    # Adjust the title with the correct number of participants
    title = f'{protocol} participants ({num_participants_used}), {onset_type} onset {ICA_file} {ICA_file} {reject_suffix}'
    
    
    # Define info for the plots
    color_dict = {'pa1': 'red', 'pa2': 'orange', 'pa3': 'yellow', 'pa4': 'green', 'pa5': 'blue', 'pa6': 'indigo'}
    linestyle_dict = {'pa1': '-', 'pa2': '-', 'pa3': '-', 'pa4': '-', 'pa5': '-', 'pa6': '-'}
    
    #all channels for all participants
    fig = mne.viz.plot_compare_evokeds(evks,
                                 ci=False,
                                 legend='upper left',
                                 show_sensors='upper right',
                                 colors=color_dict,
                                 linestyles=linestyle_dict,
                                 title=f'Suppression effect of PA condition sequencees; participants ({n}), {onset_type} onset{ICA_file} {reject_file}',
                                 show=plot_show,    
                                 #ylim=dict(mag=[0, 30])# set y-axis limits
                                      ) 
    plt.savefig(f'{plot_directory}/ERPs_6_pa_conditions_{evoked_method}_{onset_type}_{ICA_suffix}_{reject_suffix}.pdf')
    
    #all channels for all participants
    fig = mne.viz.plot_compare_evokeds(evks,
                                 combine='mean',   
                                 ci=False,
                                 legend='upper left',
                                 show_sensors='upper right',
                                 colors=color_dict,
                                 linestyles=linestyle_dict,
                                 title=f'Suppression effect of PA condition sequencees; participants ({n}), {onset_type} onset{ICA_file} {reject_file}',
                                 show=True
                                      ) 
    
    # Create subplots for the butterfly plots
    fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(15, 10))  # Adjusted to fit 3x2 grid
    evks['pa1'].plot(exclude='bads', spatial_colors=True, axes=axes[0, 0], show=False)
    axes[0, 0].set_title('PA1, all channels')
    evks['pa2'].plot(exclude='bads', spatial_colors=True, axes=axes[0, 1], show=False)
    axes[0, 1].set_title('PA2, all channels')
    evks['pa3'].plot(exclude='bads', spatial_colors=True, axes=axes[1, 0], show=False)
    axes[1, 0].set_title('PA3, all channels')
    evks['pa4'].plot(exclude='bads', spatial_colors=True, axes=axes[1, 1], show=False)
    axes[1, 1].set_title('PA4, all channels')
    evks['pa5'].plot(exclude='bads', spatial_colors=True, axes=axes[2, 0], show=False)
    axes[2, 0].set_title('PA5, all channels')
    evks['pa6'].plot(exclude='bads', spatial_colors=True, axes=axes[2, 1], show=False)
    axes[2, 1].set_title('PA6, all channels')
    # Calculate the maximum ylim value among the six plots
    max_ylim = max([ax.get_ylim()[1] for ax in axes.flatten()])
    # Set the same ylim value for all subplots
    for ax in axes.flatten():
        ax.set_ylim([-max_ylim, max_ylim])
    plt.suptitle(f'Suppression effect of PA condition sequencees; participants ({n}), {onset_type} onset{ICA_file} {reject_file}', fontsize=14)
    plt.show()
    
    #plot topographic plot
    # Create a 6x7 grid of subplots 
    fig, axs = plt.subplots(6, 7, figsize=(20, 12), gridspec_kw={'height_ratios': [1, 1, 1, 1, 1, 1], 'hspace': 0})
    times = [0.200, 0.250, 0.300, 0.350, 0.400, 0.450, 0.500]  # Matches the 7 columns in the grid
    evks['pa1'].plot_topomap(times=times, ch_type='mag', axes=axs[0, :], show=False, colorbar=False)  # First row
    evks['pa2'].plot_topomap(times=times, ch_type='mag', axes=axs[1, :], show=False, colorbar=False)  # Second row
    evks['pa3'].plot_topomap(times=times, ch_type='mag', axes=axs[2, :], show=False, colorbar=False)  # Third row
    evks['pa4'].plot_topomap(times=times, ch_type='mag', axes=axs[3, :], show=False, colorbar=False)  # Fourth row
    evks['pa5'].plot_topomap(times=times, ch_type='mag', axes=axs[4, :], show=False, colorbar=False)  # Fifth row
    evks['pa6'].plot_topomap(times=times, ch_type='mag', axes=axs[5, :], show=False, colorbar=False)  # Sixth row

    plt.show()
    
    # Get the channel names for left hemisphere (based on negative x-coordinate)
    left_hemisphere_chs = [ch_name for ch_name, pos in zip(evk.info['ch_names'], evk.info['chs']) if pos['loc'][0] < 0]
    #left hemispehere chans
    mne.viz.plot_compare_evokeds(evks,
                                 combine='gfp',
                                 picks = left_hemisphere_chs,
                                 ci=False,
                                 legend='upper left',
                                 show_sensors='upper right',
                                 colors=color_dict,
                                 linestyles=linestyle_dict,
                                 title=f'Suppression effect of PA condition sequencees; participants ({n}), {onset_type} onset{ICA_file} {reject_file}',
                                 show=plot_show,
                                 ylim=dict(mag=[0, 30])# set y-axis limits
                                          ) 
    plt.savefig(f'{plot_directory}/ERPs_6_pa_conditions_left_hemisphere_channels_{evoked_method}_{onset_type}_{ICA_suffix}_{reject_suffix}.pdf')
    plt.close()
    
if averaging_pipeline == 'per_participant':
    # Initialize a dictionary to store individual ERPs for each condition
    individual_evks = {condition: [] for condition in all_pa_epochs.keys()}
    
    # Initialize a dictionary to count the number of epochs for each condition
    individual_epochs_counts = {condition: 0 for condition in all_pa_epochs.keys()}
    
    # Iterate through each condition in categorized_epochs
    for condition, epochs_list in all_pa_epochs.items():
        # Calculate the ERP for each participant individually
        for epochs in epochs_list:
            if len(epochs) > 0:
                evk_across_parts = epochs.average()
                individual_evks[condition].append(evk_across_parts)
                # Increment the count for this condition
                individual_epochs_counts[condition] += len(epochs)
            else:
                print(f"Skipping empty Epochs object for condition {condition}")
    
    
    # print the number of ERPs per condition
    print("Number of ERPs per condition:")
    for condition, evks in individual_evks.items():
        print(f"{condition}: {len(evks)}")  # Print the count of ERPs for each condition
    
    # print the counts of epochs
    print("\nCount of epochs for each condition:")
    for condition, count in individual_epochs_counts.items():
        print(f"{condition}: {count}")
    
    # Calculate the number of participants based on the evoked objects
    num_participants_used = len(epochs_list)
    title = f'{protocol} participants ({num_participants_used}),{evoked_method}_{onset_type}_{ICA_suffix}_{reject_suffix}'

    
    # Define info for the plots
    color_dict = {'pa1': 'red', 'pa2': 'orange', 'pa3': 'yellow', 'pa4': 'green', 'pa5': 'blue', 'pa6': 'indigo'}
    linestyle_dict = {'pa1': '-', 'pa2': '-', 'pa3': '-', 'pa4': '-', 'pa5': '-', 'pa6': '-'}
    
    #all channels for all participants
    fig = mne.viz.plot_compare_evokeds(individual_evks,
                                 ci=False,
                                 legend='upper left',
                                 show_sensors='upper right',
                                 colors=color_dict,
                                 linestyles=linestyle_dict,
                                 title=f'Suppression effect of PA condition sequencees; participants ({n}), {onset_type} onset{ICA_file} {reject_file}',
                                 show=plot_show,    
                                 #ylim=dict(mag=[0, 30])# set y-axis limits
                                      ) 
    plt.savefig(f'{plot_directory}/ERPs_6_pa_conditions_{evoked_method}_{onset_type}_{ICA_suffix}_{reject_suffix}.pdf')
        
    #all channels for all participants
    fig = mne.viz.plot_compare_evokeds(individual_evks,
                                 combine='mean',   
                                 ci=False,
                                 legend='upper left',
                                 show_sensors='upper right',
                                 colors=color_dict,
                                 linestyles=linestyle_dict,
                                 title=f'Suppression effect of PA condition sequencees; participants ({n}), {onset_type} onset{ICA_file} {reject_file}',
                                 show=True
                                      ) 
